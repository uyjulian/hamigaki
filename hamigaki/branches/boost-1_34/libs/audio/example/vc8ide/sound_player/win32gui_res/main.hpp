// Automatically Generated by WIN32GUI Resource Splitter v1.1.5
// See latest details at http://www.torjo.com/win32gui/
//
// DONOT modify this manually. Changes will be overwritten automatically


#ifndef WIN32GUI_RES_main_H
#define WIN32GUI_RES_main_H
#else
#error Never #include this twice. Never #include this from within a header
#endif

// in case you want to have a header be included first...
// Useful when you have shared resource IDs (IDs you can use throughout multiple projects)
//
// Also, you might need this in case you use standard IDs like IDOK, IDCANCEL, etc.
// Note: the same can be achieved with a precompiled header-file.
#ifdef WIN32GUI_RES_INCLUDE_ALWAYS
#include WIN32GUI_RES_INCLUDE_ALWAYS
#endif

// since you're using the controls, this is a must
#include <win32gui/controls.hpp>
#include <win32gui/events/common.hpp>

#ifndef __GNUC__
#include "win32gui_res/menus.hpp"
#else
// GCC
#include "../win32gui_res/menus.hpp"
#endif


// win32gui forward declares...
namespace win32 { namespace gui {
    struct button;
    struct check_box;
    struct radio_button;
    struct group_box;
    struct edit;
    struct multi_edit;
    struct label;
    struct hyper_link;
    struct lite_html;
    struct month_cal_ctrl;
    struct date_time_ctrl;
    struct animate_ctrl;
    struct progress_bar;
    struct slider_ctrl;
    struct spin_button;
    struct scroll_bar;
    struct tab_ctrl;
    struct combo_box;
    struct list_box;
    struct splitter;
    struct header_ctrl;
    struct list_ctrl;
    struct tree_ctrl;
    struct rebar;
    struct toolbar;
    struct status_bar;
    struct bitmap_button;
    struct bitmapped_button;
    struct bitmapped_check_box;
    struct bitmapped_radio_button;
    struct tooltip_ctrl;
    struct tab_dialog;
}}


// dialog forward declares - for dialog-on-dialog
#ifdef WIN32GUI_RES_DLGONDLG_NAMESPACE
namespace WIN32GUI_RES_DLGONDLG_NAMESPACE {
#endif

#ifdef WIN32GUI_RES_DLGONDLG_NAMESPACE
}
#endif




namespace main_ { namespace {

using namespace win32::gui; // for the existing win32gui controls classes

#ifdef WIN32GUI_RES_DLGONDLG_NAMESPACE
using namespace WIN32GUI_RES_DLGONDLG_NAMESPACE;
#endif


enum { dialog_id_ = 101 };
struct m_slider_ {
    typedef ::win32::gui::slider_ctrl id_to_class;
    enum { id = 1001 }; 
    typedef ::win32::gui::events_for_class<id, id_to_class> ev;
};

#ifndef m_slider
#define m_slider child<m_slider_>()
#endif


struct m_play_ {
    typedef ::win32::gui::button id_to_class;
    enum { id = 1002 }; 
    typedef ::win32::gui::events_for_class<id, id_to_class> ev;
};

#ifndef m_play
#define m_play child<m_play_>()
#endif


struct m_stop_ {
    typedef ::win32::gui::button id_to_class;
    enum { id = 1003 }; 
    typedef ::win32::gui::events_for_class<id, id_to_class> ev;
};

#ifndef m_stop
#define m_stop child<m_stop_>()
#endif




// for those cases when you forget what controls you have on your dialog...
// just type 'ctl::' and let auto-completion tell you...
namespace ctl {
typedef  m_slider_ slider;
typedef  m_play_ play;
typedef  m_stop_ stop;

}

}}


// Convension: when having a win32gui window class *source file*, 
// and you want to #include multiple <win32gui_res/*.hpp> header files,
// first include the one corresponding to your class 
#ifndef WIN32GUI_RES_FIRST_DIALOG
#define WIN32GUI_RES_FIRST_DIALOG
using namespace main_;
#endif


#ifndef WIN32GUI_RES_NO_UNDEFINES
// in case we've used any predefined IDs, make sure to #undefine them first
// So that you won't use them by mistake...

#endif


