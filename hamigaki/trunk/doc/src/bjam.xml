<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<!--
  Hamigaki Library Document Source

  Copyright Takeshi Mouri 2007.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
-->
<chapter id="bjam">
  <title>付録: bjamの文法</title>
  <para>ここではBoostライブラリやHamigakiライブラリのビルドに使われるbjamの文法について説明する。</para>
  <formalpara>
    <title>トークン</title>
    <para>bjamのトークンは全て空白(スペース、水平タブ、垂直タブ、復帰、改行、改ページ)で区切られる。C/C++のような区切り文字は存在しない。よって、</para>
    <informalexample>
      <programlisting><![CDATA[hello bjam! ;
[this_is_a_token] ;
]]></programlisting>
    </informalexample>
    <para>は、「hello」、「bjam!」、「;」、「[this_is_a_token]」、「;」の５つのトークンとして解釈される。</para>
    <para>トークンに空白を含める場合は、ダブルクォーテーションで囲むか、「\」でエスケープ処理を施す。bjamのエスケープ処理にはC/C++の「\n」のような特殊なパターンはなく、単に次の文字をただの文字として扱う。よって、</para>
    <informalexample>
      <programlisting><![CDATA["hello bjam!" ;
\"this\ is\ "a token\"" ;
]]></programlisting>
    </informalexample>
    <para>は、「hello bjam!」、「;」、「"this is a token"」、「;」の4つのトークンとして解釈される。</para>
  </formalpara>
  <formalpara>
    <title>コメント</title>
    <para>「#」から改行までの文字列はコメントとして扱われ、bjamに読み飛ばされる。ただし、「#」がトークンの一部である場合はコメントとみなされない。</para>
    <informalexample>
      <programlisting><![CDATA[#This is a comment.
But_#it_is_not_a_commnt. ;
]]></programlisting>
    </informalexample>
  </formalpara>
  <formalpara>
    <title>変数</title>
    <para>変数は宣言なしに使用できる。変数の名前には制限はない。bjamのキーワードを変数名に使う場合はクォーティングかエスケープ処理を施す。</para>
    <informalexample>
      <programlisting><![CDATA[# 変数aに文字列「1」を代入
a = 1 ;

# 変数bが空なら文字列「hoge」を代入
b ?= hoge ;

# 変数bに文字列「foo」と「bar」を追加
b += foo bar ; 

# 変数ifに文字列「else」を代入
"if" = else ;
]]></programlisting>
    </informalexample>
    <para>代入文の前にlocalを付けると、スコープ内でのみ有効なローカル変数を定義できる。</para>
    <informalexample>
      <programlisting><![CDATA[# ローカル変数aに文字列「1」を代入
local a = 1 ;

# ローカル変数には「?=」、「+=」は使えない
#local b ?= hoge ;
#local b += foo bar ; 
]]></programlisting>
    </informalexample>
  </formalpara>
  <formalpara>
    <title>モジュール</title>
    <para>モジュールはC++の名前空間に相当する機能である。ただし、C++の名前空間と違い、モジュールは入れ子にすることができない。</para>
    <informalexample>
      <programlisting><![CDATA[# 最初はルートモジュール
# モジュールfooに切り替える
module foo
{
    # モジュールbarに切り替える
    # モジュールfoo.barではない
    module bar
    {
    }

    # ルートモジュールに切り替える
    module
    {
    }
}
]]></programlisting>
    </informalexample>
  </formalpara>
</chapter>
