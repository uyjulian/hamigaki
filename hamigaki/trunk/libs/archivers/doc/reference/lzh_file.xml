<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE header PUBLIC "-//Boost//DTD BoostBook XML V1.0//EN"
  "http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<!--
  Hamigaki.Archivers Library Document Source

  Copyright Takeshi Mouri 2006-2008.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)

  See http://hamigaki.sourceforge.jp/libs/archivers for library home page.
-->
<header name="hamigaki/archivers/lzh_file.hpp">
  <namespace name="hamigaki">
    <namespace name="archivers">
      <class name="basic_lzh_file_source">
        <template>
          <template-type-parameter name="Source"/>
          <template-type-parameter name="Path">
            <default>boost::filesystem::path</default>
          </template-type-parameter>
        </template>

        <purpose><para>LZHファイルへの読み込み専用アクセスを提供するSourceモデル</para></purpose>

        <description>
          <para>Sourceを受け取り、LZHファイルとしてフォーマットを解釈した結果を読み出すことができる。</para>
          <para>モデルとなるコンセプト:<simplelist type='inline'>
              <member><conceptname>Source</conceptname></member>
          </simplelist></para>
        </description>

        <typedef name="char_type">
          <type>char</type>
        </typedef>

        <typedef name="category">
          <type><emphasis>implementation defined</emphasis></type>
        </typedef>

        <typedef name="path_type">
          <type>Path</type>
        </typedef>

        <typedef name="header_type">
          <type><classname>lha::basic_header</classname>&lt;Path&gt;</type>
        </typedef>

        <constructor specifiers="explicit">
          <parameter name="src">
            <paramtype>const Source&amp;</paramtype>
          </parameter>
        </constructor>

        <method-group name="Boost.Iostreams implementation">
          <method name="read">
            <type>std::streamsize</type>
            <parameter name="s">
              <paramtype>const char*</paramtype>
            </parameter>
            <parameter name="n">
              <paramtype>std::streamsize</paramtype>
            </parameter>
            <effects><simpara><code>header().method</code>に従い、現在のエントリの圧縮イメージを展開して読み出す。</simpara></effects>
          </method>
        </method-group>

        <method-group name="Hamigaki.Archivers implementation">
          <method name="next_entry">
            <type>bool</type>
            <effects><simpara>読み出しの対象を次のエントリに移動する</simpara></effects>
            <returns><simpara>次のエントリがあれば<code>true</code>、なければ<code>false</code></simpara></returns>
          </method>

          <method name="header" cv="const">
            <type><classname>lha::basic_header</classname>&lt;Path&gt;</type>
            <returns><simpara>ヘッダ情報</simpara></returns>
          </method>
        </method-group>
      </class>

      <class name="lzh_file_source">
        <inherit access="public">
          <type><classname>basic_lzh_file_source</classname>&lt;<classname>hamigaki::iostreams::file_source</classname>&gt;</type>
          <purpose>Exposition only</purpose>
        </inherit>

        <constructor specifiers="explicit">
          <parameter name="path">
            <paramtype>const std::string&amp;</paramtype>
          </parameter>
        </constructor>
      </class>

      <class name="wlzh_file_source">
        <inherit access="public">
          <type><classname>basic_lzh_file_source</classname>&lt;<classname>hamigaki::iostreams::file_source</classname>, boost::filesystem::wpath&gt;</type>
          <purpose>Exposition only</purpose>
        </inherit>

        <constructor specifiers="explicit">
          <parameter name="path">
            <paramtype>const std::string&amp;</paramtype>
          </parameter>
        </constructor>
      </class>

      <class name="basic_lzh_file_sink">
        <template>
          <template-type-parameter name="SeekableSink"/>
          <template-type-parameter name="Path">
            <default>boost::filesystem::path</default>
          </template-type-parameter>
        </template>

        <purpose><para>LZHファイルへの書き込み専用アクセスを提供するSinkモデル</para></purpose>

        <description>
          <para>受け取ったSeekableSinkへ複数のファイルデータをLZHファイルとして書き出すことができる。</para>
          <para>モデルとなるコンセプト:<simplelist type='inline'>
              <member><conceptname>Sink</conceptname></member>
              <member><conceptname>ClosableDevice</conceptname></member>
          </simplelist></para>
        </description>

        <typedef name="char_type">
          <type>char</type>
        </typedef>

        <typedef name="category">
          <type><emphasis>implementation defined</emphasis></type>
        </typedef>

        <typedef name="path_type">
          <type>Path</type>
        </typedef>

        <typedef name="header_type">
          <type><classname>lha::basic_header</classname>&lt;Path&gt;</type>
        </typedef>

        <constructor>
          <parameter name="sink">
            <paramtype>const SeekableSink&amp;</paramtype>
          </parameter>
        </constructor>

        <method-group name="Boost.Iostreams implementation">
          <method name="write">
            <type>std::streamsize</type>
            <parameter name="s">
              <paramtype>const char_type*</paramtype>
            </parameter>
            <parameter name="n">
              <paramtype>std::streamsize</paramtype>
            </parameter>
            <effects><simpara><code>create_entry()</code>に渡したヘッダの<code>method</code>に従い、圧縮したデータを書き出す。</simpara><simpara>但し、ヘッダの<code>compressed_size</code>に値が設定されている場合は、予め圧縮されたデータを入力として渡さなければならない。</simpara></effects>
            <throws>圧縮後のサイズが、ヘッダの<code>file_size</code>を超えた場合、<classname>give_up_compression</classname></throws>
          </method>

          <method name="close">
            <type>void</type>
          </method>
        </method-group>

        <method-group name="Hamigaki.Archivers implementation">
          <method name="create_entry">
            <type>void</type>
            <parameter name="head">
              <paramtype>const <classname>lha::basic_header</classname>&lt;Path&gt;&amp;</paramtype>
            </parameter>
            <effects><simpara>新しいエントリを作成し、書き込みの対象とする</simpara></effects>
          </method>

          <method name="rewind_entry">
            <type>void</type>
            <effects><simpara>現在のエントリの圧縮メソッドを「-lh0-」に変更し、書き込み位置を先頭に戻す</simpara></effects>
          </method>

          <method name="close_archive">
            <type>void</type>
            <effects><simpara>LZHエンドマークを出力し、アーカイブを閉じる。出力先の外部SeekableSinkも閉じられる。</simpara></effects>
          </method>
        </method-group>

        <method-group name="modifiers">
          <method name="default_method">
            <type>void</type>
            <parameter name="method">
              <paramtype>const char*</paramtype>
            </parameter>
            <effects><simpara>既定の圧縮メソッドを<code>method</code>に設定する</simpara></effects>
          </method>
        </method-group>
      </class>

      <class name="lzh_file_sink">
        <inherit access="public">
          <type><classname>basic_lzh_file_sink</classname>&lt;<classname>hamigaki::iostreams::file_sink</classname>&gt;</type>
          <purpose>Exposition only</purpose>
        </inherit>

        <constructor>
          <parameter name="path">
            <paramtype>const std::string&amp;</paramtype>
          </parameter>
        </constructor>
      </class>

      <class name="wlzh_file_sink">
        <inherit access="public">
          <type><classname>basic_lzh_file_sink</classname>&lt;<classname>hamigaki::iostreams::file_sink</classname>, boost::filesystem::wpath&gt;</type>
          <purpose>Exposition only</purpose>
        </inherit>

        <constructor>
          <parameter name="path">
            <paramtype>const std::string&amp;</paramtype>
          </parameter>
        </constructor>
      </class>
    </namespace>
  </namespace>
</header>
