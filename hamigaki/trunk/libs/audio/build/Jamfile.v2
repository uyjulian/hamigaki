# Hamigaki Audio Library Jamfile

# Copyright Takeshi Mouri 2007-2011.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

# See http://hamigaki.sourceforge.jp/libs/audio for library home page.

import directx ;
import modules ;
import os ;
import project ;

local NO_ASIO = [ modules.peek : NO_ASIO ] ;
local NO_OGG = [ modules.peek : NO_OGG ] ;
local NO_PULSE_AUDIO = [ modules.peek : NO_PULSE_AUDIO ] ;
local NO_VORBIS = [ modules.peek : NO_VORBIS ] ;

local rule make-project ( name )
{
    modules.poke $(name) : __name__ : $(name) ;
    modules.poke modules : $(name).__binding__ : $(__file__) ;
    module $(name)
    {
        import project ;
        project.initialize $(__name__) ;
        project $(__name__) ;
    }
}

if ! $(NO_ASIO) && ! [ project.find /asio : . ]
{
    if [ modules.peek : HAVE_ASIO ]
    {
        project.push-current [ project.current ] ;
        make-project asio ;
        module asio
        {
            local inc = [ modules.peek : ASIO_INCLUDE ] ;
            alias headers : : : : <include>$(inc) ;
        }
        project.pop-current ;
    }
    else
    {
        NO_ASIO = 1 ;
        modules.poke : NO_ASIO : 1 ;
    }
}

if ! $(NO_PULSE_AUDIO) && ! [ project.find /pulse_audio : . ]
{
    if [ modules.peek : HAVE_PULSE_AUDIO ]
    {
        project.push-current [ project.current ] ;
        make-project pulse_audio ;
        module pulse_audio
        {
            local pa-inc = [ modules.peek : PULSE_AUDIO_INCLUDE ] ;
            local pa-lib = [ modules.peek : PULSE_AUDIO_LIBPATH ] ;

            lib pulse-simple
                : :
                <library-path>$(pa-lib)
                : :
                <include>$(pa-inc)
                <library-path>$(pa-lib)
                <link>shared:<dll-path>$(pa-lib)
                ;
        }
        project.pop-current ;
    }
    else
    {
        NO_PULSE_AUDIO = 1 ;
        modules.poke : NO_PULSE_AUDIO : 1 ;
    }
}

project hamigaki/audio
    : requirements
      <link>shared:<define>HAMIGAKI_AUDIO_DYN_LINK=1
    : usage-requirements
      <link>shared:<define>HAMIGAKI_AUDIO_DYN_LINK=1
    : source-location ../src
    ;

local SOURCES =
    pcm_device
    ;

local LIBRARIES =
    ;

local REQUIREMENTS =
    ;

local os-name = [ os.name ] ;
if $(os-name) = NT
{
    SOURCES += mme_device ;
}
else if $(os-name) = MACOSX
{
    SOURCES += audio_unit ;
}
else if $(os-name) in NETBSD OPENBSD SOLARIS
{
    SOURCES += audio_device ;
}
else if $(os-name) = CYGWIN
{
    SOURCES += dsp_device mme_device ;
}
else
{
    SOURCES += dsp_device ;
}

if ! $(NO_ASIO)
{
    SOURCES +=
        asio
        asio_drivers
        ;

    LIBRARIES += /asio//headers ;
}

if [ directx.configured ]
{
    SOURCES +=
        direct_sound
        direct_sound_capture
        ;

    LIBRARIES += /directx//dsound ;
}

if ! $(NO_OGG) && ! $(NO_VORBIS)
{
    SOURCES +=
        vorbis_encoder
        vorbis_file
        ;

    LIBRARIES +=
        /hamigaki/vorbis//hamigaki_vorbisenc
        /hamigaki/vorbis//hamigaki_vorbisfile
        ;
}

if ! $(NO_PULSE_AUDIO)
{
    if [ os.name ] = NT
    {
        REQUIREMENTS +=
            <toolset>gcc:<source>pulse_audio.cpp
            <toolset>gcc:<library>/pulse_audio//pulse-simple
            ;
    }
    else
    {
        SOURCES += pulse_audio ;
        LIBRARIES += /pulse_audio//pulse-simple ;
    }
}

local IMPORT_LIBS =
    <toolset>gcc,<os>NT:<find-static-library>ole32
    <toolset>gcc,<os>NT:<find-static-library>winmm
    <toolset>gcc,<os>CYGWIN:<find-static-library>ole32
    <toolset>gcc,<os>CYGWIN:<find-static-library>winmm
    <toolset>darwin:<framework>/System/Library/Frameworks/AudioToolbox.framework
    <toolset>darwin:<framework>/System/Library/Frameworks/AudioUnit.framework
    <toolset>darwin:<framework>/System/Library/Frameworks/CoreAudio.framework
    <toolset>darwin:<framework>/System/Library/Frameworks/CoreServices.framework
    ;

lib hamigaki_audio
    :
    $(SOURCES).cpp
    $(LIBRARIES)
    :
    $(REQUIREMENTS)
    $(IMPORT_LIBS)
    :
    :
    $(IMPORT_LIBS)
    ;
